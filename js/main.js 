// PersonaHire Ultimate - 主功能模块
// 负责核心面试功能、API调用、UI交互、语音合成

class UIManager {
    constructor() {
        this.messageQueue = [];
        this.isProcessing = false;
    }

    showMessage(message, type = 'info') {
        const statusDiv = document.getElementById('statusMessage');
        statusDiv.className = type;
        statusDiv.innerHTML = message;
        statusDiv.style.display = 'block';
        
        setTimeout(() => {
            statusDiv.style.display = 'none';
        }, 5000);
    }

    showError(message) {
        this.showMessage(message, 'error');
    }

    showSuccess(message) {
        this.showMessage(message, 'success');
    }

    showWarning(message) {
        this.showMessage(message, 'warning');
    }

    setLoading(show, message = '🤖 AI面试官正在深度思考中...') {
        const loadingDiv = document.getElementById('loading');
        if (show) {
            document.getElementById('loading').innerHTML = message;
            loadingDiv.style.display = 'block';
        } else {
            loadingDiv.style.display = 'none';
        }
    }

    updateButtonStates(state) {
        const buttons = {
            'startBtn': state.canStart,
            'endBtn': state.canEnd,
            'reportBtn': state.canReport,
            'sendBtn': state.canSend,
            'userInput': state.canInput
        };

        Object.entries(buttons).forEach(([id, enabled]) => {
            const element = document.getElementById(id);
            if (element) {
                if (id === 'userInput') {
                    element.disabled = !enabled;
                } else {
                    element.disabled = !enabled;
                }
            }
        });
    }
}

class AudioManager {
    constructor() {
        this.currentAudio = null;
        this.audioQueue = [];
        this.isPlaying = false;
    }

    async generateSpeech(text, voice = 'nova') {
        const audioIndicator = document.getElementById('audioIndicator');
        audioIndicator.style.display = 'block';

        try {
            // 优先使用ElevenLabs
            if (window.configManager.apiKeys.elevenlabs && 
                window.configManager.apiKeys.elevenlabs !== "your-elevenlabs-api-key-here") {
                return await this.generateElevenLabsSpeech(text);
            }
            
            // 备选OpenAI TTS
            return await this.generateOpenAISpeech(text, voice);
        } catch (error) {
            console.error('语音生成失败:', error);
            return null;
        } finally {
            audioIndicator.style.display = 'none';
        }
    }

    async generateElevenLabsSpeech(text) {
        const response = await fetch('https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM', {
            method: 'POST',
            headers: {
                'Accept': 'audio/mpeg',
                'Content-Type': 'application/json',
                'xi-api-key': window.configManager.apiKeys.elevenlabs
            },
            body: JSON.stringify({
                text: text,
                model_id: 'eleven_multilingual_v2',
                voice_settings: {
                    stability: 0.5,
                    similarity_boost: 0.8,
                    style: 0.3,
                    use_speaker_boost: true
                }
            })
        });

        if (response.ok) {
            const audioBlob = await response.blob();
            return URL.createObjectURL(audioBlob);
        }
        throw new Error('ElevenLabs TTS failed');
    }

    async generateOpenAISpeech(text, voice) {
        const response = await fetch('https://api.openai.com/v1/audio/speech', {
            method: 'POST',
            headers: window.securityManager.getSecureHeaders(window.configManager.apiKeys.openai),
            body: JSON.stringify({
                model: 'tts-1',
                voice: voice,
                input: text,
                speed: 1.0
            })
        });

        if (response.ok) {
            const audioBlob = await response.blob();
            return URL.createObjectURL(audioBlob);
        }
        throw new Error('OpenAI TTS failed');
    }

    async playAudio(text, voice = null) {
        if (this.currentAudio) {
            this.currentAudio.pause();
        }

        try {
            const voiceStyle = voice || document.getElementById('voiceStyle').value;
            const audioUrl = await this.generateSpeech(text, voiceStyle);
            
            if (audioUrl) {
                this.currentAudio = new Audio(audioUrl);
                this.isPlaying = true;
                
                this.currentAudio.onended = () => {
                    URL.revokeObjectURL(audioUrl);
                    this.isPlaying = false;
                };

                this.currentAudio.onerror = () => {
                    console.error('音频播放失败');
                    this.isPlaying = false;
                };

                await this.currentAudio.play();
            }
        } catch (error) {
            console.error('音频播放失败:', error);
            this.isPlaying = false;
        }
    }

    stopAudio() {
        if (this.currentAudio) {
            this.currentAudio.pause();
            this.currentAudio = null;
            this.isPlaying = false;
        }
    }
}

class APIManager {
    constructor() {
        this.requestCount = 0;
        this.lastRequestTime = 0;
    }

    async callGPT(messages, customConfig = {}) {
        // 安全验证
        const rateCheck = window.securityManager.checkRateLimit();
        if (!rateCheck.allowed) {
            throw new Error(rateCheck.error);
        }

        // 获取配置
        const config = {
            ...window.configManager.getGPTConfig(),
            ...customConfig,
            messages: messages
        };

        // Token优化
        if (window.configManager.settings.tokenOptimization) {
            config.messages = window.tokenMonitor.optimizeContext(messages);
        }

        // 智能摘要
        if (window.configManager.settings.smartSummary && messages.length > 10) {
            config.messages = await window.tokenMonitor.generateSmartSummary(messages);
        }

        const startTime = Date.now();

        try {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: window.securityManager.getSecureHeaders(window.configManager.apiKeys.openai),
                body: JSON.stringify(config)
            });

            const responseTime = Date.now() - startTime;

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(window.securityManager.handleSecureError(errorData, 'GPT API'));
            }

            const data = await response.json();
            
            // 验证响应
            const validation = window.securityManager.validateApiResponse(data, ['choices']);
            if (!validation.valid) {
                throw new Error(validation.error);
            }

            // 记录Token使用
            const inputText = messages.map(m => m.content).join(' ');
            const outputText = data.choices[0].message.content;
            
            window.tokenMonitor.recordRequest(
                config.model, 
                inputText, 
                outputText, 
                data.usage
            );

            // 记录请求统计
            this.requestCount++;
            this.lastRequestTime = Date.now();

            return data.choices[0].message.content;

        } catch (error) {
            console.error('GPT API调用失败:', error);
            throw new Error(window.securityManager.handleSecureError(error, 'GPT API调用'));
        }
    }
}

class InterviewManager {
    constructor() {
        this.conversationHistory = [];
        this.interviewStarted = false;
        this.interviewData = {
            startTime: null,
            endTime: null,
            responses: [],
            personality: null,
            difficulty: null
        };
    }

    async startInterview() {
        // 验证配置
        if (!window.configManager.apiKeys.openai || 
            (window.configManager.isDeveloperMode && !window.configManager.apiKeys.openai.startsWith('sk-'))) {
            window.uiManager.showError('请先配置OpenAI API Key');
            return;
        }

        const style = document.getElementById('interviewerStyle').value;
        const difficulty = document.getElementById('difficulty').value;

        // 记录面试信息
        this.interviewData = {
            startTime: new Date(),
            personality: style,
            difficulty: difficulty,
            responses: []
        };

        // 构建系统提示
        const personalities = window.configManager.getInterviewerPersonalities();
        const difficultySettings = window.configManager.getDifficultySettings();

        let systemPrompt = `${personalities[style]}

面试难度: ${difficultySettings[difficulty]}

面试规则：
1. 一次只问一个问题，等候选人回答完再问下一个
2. 根据候选人的回答进行3-5轮深度追问
3. 记住之前的所有对话内容，形成连贯的面试体验
4. 每个问题都要有明确的考察目的
5. 面试总时长控制在15-20分钟
6. 适时给予反馈和鼓励
7. 最后要给出综合评价

请用中文进行面试，保持专业但友好的语气。现在开始第一个问题。`;

        // 自适应难度调整
        if (window.configManager.settings.adaptiveDifficulty) {
            systemPrompt += `\n\n特别说明：请根据候选人的回答质量动态调整问题难度。如果回答优秀，可以提高难度；如果回答不够理想，可以适当降低难度。`;
        }

        this.conversationHistory = [
            { role: 'system', content: systemPrompt }
        ];

        // 更新UI状态
        window.uiManager.updateButtonStates({
            canStart: false,
            canEnd: true,
            canReport: true,
            canSend: true,
            canInput: true
        });

        window.uiManager.setLoading(true, '🤖 AI面试官正在准备第一个问题...');

        try {
            const response = await window.apiManager.callGPT(this.conversationHistory);
            this.addMessage(response, 'interviewer');
            await window.audioManager.playAudio(response);
            
            this.interviewStarted = true;
            window.uiManager.showSuccess('✅ 面试开始！请回答面试官的问题。');
            
        } catch (error) {
            window.uiManager.showError('启动面试失败: ' + error.message);
            this.endInterview();
        } finally {
            window.uiManager.setLoading(false);
        }
    }

    async sendMessage() {
        const userInput = document.getElementById('userInput');
        const message = userInput.value.trim();

        if (!message) {
            window.uiManager.showError('请输入您的回答');
            return;
        }

        // 安全验证
        const inputValidation = window.securityManager.validateUserInput(message);
        if (!inputValidation.valid) {
            window.uiManager.showError(inputValidation.error);
            return;
        }

        // 检测提示注入
        const injectionCheck = window.securityManager.detectPromptInjection(message);
        if (injectionCheck.detected) {
            window.uiManager.showError(injectionCheck.error);
            return;
        }

        // 清理输入
        const cleanMessage = window.securityManager.sanitizeInput(message);

        // 记录用户回答
        this.interviewData.responses.push({
            question: this.getLastInterviewerMessage(),
            answer: cleanMessage,
            timestamp: new Date()
        });

        this.addMessage(cleanMessage, 'user');
        userInput.value = '';

        window.uiManager.setLoading(true);
        window.uiManager.updateButtonStates({
            canStart: false,
            canEnd: true,
            canReport: true,
            canSend: false,
            canInput: true
        });

        this.conversationHistory.push({ role: 'user', content: cleanMessage });

        try {
            const response = await window.apiManager.callGPT(this.conversationHistory);
            this.conversationHistory.push({ role: 'assistant', content: response });
            
            this.addMessage(response, 'interviewer');
            await window.audioManager.playAudio(response);

            // 显示优化建议
            const suggestions = window.tokenMonitor.getOptimizationSuggestion();
            if (suggestions.length > 0) {
                console.log('优化建议:', suggestions);
            }

        } catch (error) {
            window.uiManager.showError('发送消息失败: ' + error.message);
            this.addMessage('抱歉，我遇到了一些技术问题。请稍后再试。', 'interviewer');
        } finally {
            window.uiManager.setLoading(false);
            window.uiManager.updateButtonStates({
                canStart: false,
                canEnd: true,
                canReport: true,
                canSend: true,
                canInput: true
            });
        }
    }

    getLastInterviewerMessage() {
        for (let i = this.conversationHistory.length - 1; i >= 0; i--) {
            if (this.conversationHistory[i].role === 'assistant') {
                return this.conversationHistory[i].content;
            }
        }
        return '';
    }

    async generateReport() {
        if (this.conversationHistory.length < 4) {
            window.uiManager.showError('面试内容太少，无法生成有效报告。请至少进行3轮对话。');
            return;
        }

        window.uiManager.setLoading(true, '📊 正在生成专业面试评估报告...');

        const reportPrompt = `基于以上完整的面试对话，请生成一份专业的面试评估报告。

面试信息：
- 面试官类型：${this.interviewData.personality}
- 难度等级：${this.interviewData.difficulty}
- 面试时长：${this.getInterviewDuration()}
- 对话轮数：${this.conversationHistory.filter(m => m.role === 'user').length}

请按以下结构生成报告：

## 🎯 候选人整体表现
[简要概述候选人的整体表现，突出主要优势]

## 📊 核心能力评估
### 沟通表达能力 (X/10分)
[具体评价和例子]

### 逻辑思维能力 (X/10分)
[具体评价和例子]

### 专业技能水平 (X/10分)
[具体评价和例子]

### 应变适应能力 (X/10分)
[具体评价和例子]

## ✨ 主要优势与亮点
- [具体优势1]
- [具体优势2]
- [具体优势3]

## 🔧 需要改进的方面
- [改进建议1]
- [改进建议2]
- [改进建议3]

## 📈 综合评分
**总分：X/10分**

## 💼 录用建议
[推荐/有条件推荐/不推荐，并说明理由]

## 🚀 职业发展建议
[针对性的发展建议]

请用专业、客观、建设性的语言撰写，报告要具体、有针对性，避免空泛的评价。`;

        try {
            const reportHistory = [...this.conversationHistory, { role: 'user', content: reportPrompt }];
            const report = await window.apiManager.callGPT(reportHistory, { 
                max_tokens: 1500,
                temperature: 0.3 
            });
            
            this.addMessage(`📊 **面试评估报告**\n\n${report}`, 'interviewer');
            
            // 保存报告
            this.interviewData.finalReport = report;
            this.interviewData.reportGeneratedAt = new Date();
            
            await window.audioManager.playAudio('您的专业面试评估报告已经生成完成，请查看详细分析和建议。');
            window.uiManager.showSuccess('✅ 面试报告生成成功！');
            
        } catch (error) {
            window.uiManager.showError('生成报告失败: ' + error.message);
        } finally {
            window.uiManager.setLoading(false);
        }
    }

    getInterviewDuration() {
        if (!this.interviewData.startTime) return '未知';
        const duration = (new Date() - this.interviewData.startTime) / 1000 / 60;
        return `${Math.round(duration)}分钟`;
    }

    addMessage(content, sender) {
        const chatArea = document.getElementById('chatArea');
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}`;
        
        const senderName = sender === 'interviewer' ? '🎭 AI面试官 Sarah' : '👤 您';
        const timestamp = new Date().toLocaleTimeString();
        
        messageDiv.innerHTML = `
            <strong>${senderName}：</strong>
            <span style="font-size: 0.8em; color: #666; float: right;">${timestamp}</span>
            <br>
            ${content.replace(/\n/g, '<br>')}
        `;
        
        if (sender === 'interviewer') {
            const voiceControls = document.createElement('div');
            voiceControls.className = 'voice-controls';
            voiceControls.innerHTML = `
                <button class="voice-btn" onclick="window.audioManager.playAudio('${content.replace(/'/g, "\\'")}')">
                    🔊 重播语音
                </button>
            `;
            messageDiv.appendChild(voiceControls);
        }
        
        chatArea.appendChild(messageDiv);
        chatArea.scrollTop = chatArea.scrollHeight;
    }

    endInterview() {
        this.interviewStarted = false;
        this.interviewData.endTime = new Date();
        
        window.uiManager.updateButtonStates({
            canStart: true,
            canEnd: false,
            canReport: this.conversationHistory.length >= 4,
            canSend: false,
            canInput: false
        });
        
        this.addMessage('面试结束，感谢您的参与！如需查看详细评估，请点击"生成报告"按钮。', 'interviewer');
        window.audioManager.playAudio('面试结束，感谢您的参与！');
        
        window.uiManager.showSuccess('面试已结束。您可以生成评估报告查看表现分析。');
    }

    clearChat() {
        const chatArea = document.getElementById('chatArea');
        chatArea.innerHTML = `
            <div class="message interviewer">
                <strong>🎭 AI面试官 Sarah：</strong>
                <br>
                欢迎来到PersonaHire Ultimate！我已准备好开始新的面试。请配置好设置后点击"开始面试"。
                <div class="voice-controls">
                    <button class="voice-btn" onclick="window.audioManager.playAudio('欢迎回来！我已准备好开始新的面试。')">
                        🔊 听语音欢迎
                    </button>
                </div>
            </div>
        `;
        
        this.conversationHistory = [];
        this.interviewData = {
            startTime: null,
            endTime: null,
            responses: [],
            personality: null,
            difficulty: null
        };
        
        window.uiManager.updateButtonStates({
            canStart: true,
            canEnd: false,
            canReport: false,
            canSend: false,
            canInput: false
        });
    }
}

class ExportManager {
    constructor() {
        this.supportedFormats = ['json', 'txt', 'html'];
    }

    exportConversation(format = 'json') {
        const data = this.prepareExportData();
        
        switch (format) {
            case 'json':
                this.exportAsJSON(data);
                break;
            case 'txt':
                this.exportAsText(data);
                break;
            case 'html':
                this.exportAsHTML(data);
                break;
            default:
                window.uiManager.showError('不支持的导出格式');
        }
    }

    prepareExportData() {
        return {
            metadata: {
                exportTime: new Date().toISOString(),
                platform: 'PersonaHire Ultimate',
                version: '1.0',
                interviewData: window.interviewManager.interviewData
            },
            conversation: window.interviewManager.conversationHistory,
            tokenStats: window.tokenMonitor.stats,
            efficiencyReport: window.tokenMonitor.getEfficiencyReport()
        };
    }

    exportAsJSON(data) {
        const blob = new Blob([JSON.stringify(data, null, 2)], {
            type: 'application/json'
        });
        this.downloadFile(blob, 'personahire-interview.json');
    }

    exportAsText(data) {
        let text = `PersonaHire Ultimate - 面试记录\n`;
        text += `导出时间: ${new Date().toLocaleString()}\n`;
        text += `面试时长: ${window.interviewManager.getInterviewDuration()}\n`;
        text += `面试官类型: ${data.metadata.interviewData.personality || '未知'}\n`;
        text += `难度等级: ${data.metadata.interviewData.difficulty || '未知'}\n`;
        text += `\n${'='.repeat(50)}\n\n`;

        data.conversation.forEach((msg, index) => {
            if (msg.role !== 'system') {
                const sender = msg.role === 'assistant' ? 'AI面试官' : '候选人';
                text += `${sender}: ${msg.content}\n\n`;
            }
        });

        text += `${'='.repeat(50)}\n`;
        text += `Token统计:\n`;
        text += `- 总Token: ${data.tokenStats.totalTokens}\n`;
        text += `- 输入Token: ${data.tokenStats.inputTokens}\n`;
        text += `- 输出Token: ${data.tokenStats.outputTokens}\n`;
        text += `- 预计费用: $${data.tokenStats.totalCost.toFixed(4)}\n`;

        const blob = new Blob([text], { type: 'text/plain; charset=utf-8' });
        this.downloadFile(blob, 'personahire-interview.txt');
    }

    exportAsHTML(data) {
        const html = `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>PersonaHire 面试记录</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .message { margin: 15px 0; padding: 15px; border-radius: 8px; }
        .interviewer { background: #e3f2fd; border-left: 4px solid #2196f3; }
        .user { background: #f1f8e9; border-right: 4px solid #4caf50; margin-left: 40px; }
        .stats { background: #fff3e0; padding: 15px; border-radius: 8px; margin-top: 30px; }
        .timestamp { font-size: 0.8em; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🎭 PersonaHire Ultimate - 面试记录</h1>
        <p><strong>导出时间:</strong> ${new Date().toLocaleString()}</p>
        <p><strong>面试时长:</strong> ${window.interviewManager.getInterviewDuration()}</p>
        <p><strong>面试官类型:</strong> ${data.metadata.interviewData.personality || '未知'}</p>
        <p><strong>难度等级:</strong> ${data.metadata.interviewData.difficulty || '未知'}</p>
    </div>
    
    <div class="conversation">
        ${data.conversation.filter(msg => msg.role !== 'system').map(msg => `
            <div class="message ${msg.role === 'assistant' ? 'interviewer' : 'user'}">
                <strong>${msg.role === 'assistant' ? '🎭 AI面试官 Sarah' : '👤 候选人'}:</strong>
                <div>${msg.content.replace(/\n/g, '<br>')}</div>
            </div>
        `).join('')}
    </div>
    
    <div class="stats">
        <h3>📊 统计信息</h3>
        <p><strong>总Token使用:</strong> ${data.tokenStats.totalTokens}</p>
        <p><strong>输入Token:</strong> ${data.tokenStats.inputTokens}</p>
        <p><strong>输出Token:</strong> ${data.tokenStats.outputTokens}</p>
        <p><strong>预计费用:</strong> $${data.tokenStats.totalCost.toFixed(4)}</p>
        <p><strong>对话轮数:</strong> ${data.tokenStats.conversationRounds}</p>
    </div>
</body>
</html>`;

        const blob = new Blob([html], { type: 'text/html; charset=utf-8' });
        this.downloadFile(blob, 'personahire-interview.html');
    }

    downloadFile(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        window.uiManager.showSuccess(`✅ 文件已导出: ${filename}`);
    }
}

// 初始化管理器
window.uiManager = new UIManager();
window.audioManager = new AudioManager();
window.apiManager = new APIManager();
window.interviewManager = new InterviewManager();
window.exportManager = new ExportManager();

// 绑定全局函数
window.startInterview = () => window.interviewManager.startInterview();
window.sendMessage = () => window.interviewManager.sendMessage();
window.generateReport = () => window.interviewManager.generateReport();
window.endInterview = () => window.interviewManager.endInterview();
window.clearChat = () => window.interviewManager.clearChat();
window.playWelcomeMessage = () => window.audioManager.playAudio('欢迎来到PersonaHire Ultimate！我是您的专属AI面试官Sarah，搭载了最强大的GPT-4.1推理引擎。让我们开始一场精彩的面试吧！');

// 导出功能
window.exportConversation = (format) => window.exportManager.exportConversation(format);

// 切换面板功能
window.toggleAdvancedControls = () => {
    const panel = document.getElementById('advancedControls');
    if (panel) {
        const isVisible = panel.style.display !== 'none';
        panel.style.display = isVisible ? 'none' : 'block';
    }
};

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 PersonaHire Ultimate 已加载完成');
    
    // 初始化UI状态
    window.uiManager.updateButtonStates({
        canStart: !window.configManager.isDeveloperMode || !!window.configManager.apiKeys.openai,
        canEnd: false,
        canReport: false,
        canSend: false,
        canInput: false
    });

    // 绑定回车发送
    const userInput = document.getElementById('userInput');
    if (userInput) {
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!userInput.disabled && !document.getElementById('sendBtn').disabled) {
                    window.sendMessage();
                }
            }
        });
    }

    // 显示欢迎信息
    setTimeout(() => {
        if (!window.configManager.isDeveloperMode) {
            window.uiManager.showSuccess('✨ 欢迎使用PersonaHire Ultimate！点击"开始面试"立即体验AI面试官。');
        } else {
            window.uiManager.showMessage('🔧 开发者模式已启用，请配置API密钥后开始使用。', 'info');
        }
    }, 1000);
});