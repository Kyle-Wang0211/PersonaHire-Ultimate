/* PersonaHire Ultimate - 核心业务逻辑 */
/* 面试功能 + AI调用 + 语音合成 + 用户交互 */

// =============== AI API调用 ===============

/**
 * 调用GPT-4.1 API
 * @param {Array} messages - 对话消息数组
 * @returns {Promise<string>} AI回复内容
 */
async function callGPT41(messages) {
    const startTime = Date.now();
    
    // 获取高级设置参数
    const settings = getAdvancedSettings();
    
    console.log('🤖 Calling GPT-4.1 API...', {
        messagesCount: messages.length,
        settings: settings
    });
    
    try {
        const response = await retryApiCall(async () => {
            return await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${openaiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-4.1',
                    messages: messages,
                    max_tokens: settings.maxTokens,
                    temperature: settings.temperature,
                    presence_penalty: 0.1,
                    frequency_penalty: 0.1
                })
            });
        });

        const responseTime = Date.now() - startTime;

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error?.message || '请求失败');
        }

        const data = await response.json();
        
        console.log('✅ GPT-4.1 response received:', {
            usage: data.usage,
            responseTime: responseTime
        });
        
        // 记录Token使用日志
        if (data.usage) {
            const cost = calculateCost(data.usage.prompt_tokens, data.usage.completion_tokens, 'gpt-4.1');
            logApiCall(
                'gpt-4.1', 
                data.usage.prompt_tokens, 
                data.usage.completion_tokens, 
                cost, 
                responseTime,
                {
                    model: 'gpt-4.1',
                    temperature: settings.temperature,
                    maxTokens: settings.maxTokens
                }
            );
        }
        
        return data.choices[0].message.content;
        
    } catch (error) {
        const errorMessage = handleApiError(error, 'GPT-4.1');
        console.error('❌ GPT-4.1 API call failed:', error);
        
        // 记录错误日志
        logApiCall('gpt-4.1', 0, 0, 0, Date.now() - startTime, {
            error: error.message,
            type: 'api_error'
        });
        
        throw new Error(errorMessage);
    }
}

// =============== 语音合成功能 ===============

/**
 * 生成语音
 * @param {string} text - 要合成的文本
 * @returns {Promise<string|null>} 音频URL或null
 */
async function generateSpeech(text) {
    if (!text || text.trim().length === 0) {
        console.warn('⚠️ Empty text provided for speech generation');
        return null;
    }
    
    const cleanText = sanitizeInput(text);
    const settings = getAdvancedSettings();
    
    console.log('🎵 Generating speech...', {
        textLength: cleanText.length,
        ttsModel: settings.ttsModel,
        hasElevenKey: !!elevenKey
    });
    
    // 优先使用ElevenLabs TTS
    if (elevenKey && elevenKey !== "your-elevenlabs-api-key-here") {
        const elevenLabsAudio = await generateElevenLabsSpeech(cleanText);
        if (elevenLabsAudio) {
            return elevenLabsAudio;
        }
        console.warn('⚠️ ElevenLabs TTS failed, falling back to OpenAI TTS');
    }
    
    // 备选：使用OpenAI TTS
    return await generateOpenAISpeech(cleanText, settings.ttsModel);
}

/**
 * 使用ElevenLabs生成语音
 * @param {string} text - 文本内容
 * @returns {Promise<string|null>} 音频URL
 */
async function generateElevenLabsSpeech(text) {
    const startTime = Date.now();
    
    try {
        const response = await retryApiCall(async () => {
            return await fetch('https://api.elevenlabs.io/v1/text-to-speech/21m00Tcm4TlvDq8ikWAM', {
                method: 'POST',
                headers: {
                    'Accept': 'audio/mpeg',
                    'Content-Type': 'application/json',
                    'xi-api-key': elevenKey
                },
                body: JSON.stringify({
                    text: text,
                    model_id: 'eleven_multilingual_v2',
                    voice_settings: {
                        stability: 0.5,
                        similarity_boost: 0.8,
                        style: 0.3,
                        use_speaker_boost: true
                    }
                })
            });
        });

        const responseTime = Date.now() - startTime;

        if (response.ok) {
            console.log('✅ ElevenLabs TTS successful');
            
            // 记录使用日志
            const cost = (text.length / 1000) * TOKEN_PRICES['eleven-labs'];
            logApiCall('elevenlabs', 0, text.length, cost, responseTime, {
                textLength: text.length,
                voiceId: '21m00Tcm4TlvDq8ikWAM'
            });
            
            const audioBlob = await response.blob();
            return URL.createObjectURL(audioBlob);
        } else {
            throw new Error(`ElevenLabs API error: ${response.status}`);
        }
    } catch (error) {
        console.error('❌ ElevenLabs TTS failed:', error);
        
        // 记录错误日志
        logApiCall('elevenlabs', 0, text.length, 0, Date.now() - startTime, {
            error: error.message,
            type: 'tts_error'
        });
        
        return null;
    }
}

/**
 * 使用OpenAI TTS生成语音
 * @param {string} text - 文本内容
 * @param {string} model - TTS模型
 * @returns {Promise<string|null>} 音频URL
 */
async function generateOpenAISpeech(text, model = 'tts-1') {
    const startTime = Date.now();
    
    try {
        const response = await retryApiCall(async () => {
            return await fetch('https://api.openai.com/v1/audio/speech', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${openaiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: model,
                    voice: document.getElementById('voiceStyle')?.value || 'nova',
                    input: text,
                    speed: 1.0
                })
            });
        });

        const responseTime = Date.now() - startTime;

        if (response.ok) {
            console.log('✅ OpenAI TTS successful');
            
            // 记录使用日志
            const cost = (text.length / 1000) * TOKEN_PRICES[model];
            logApiCall(model, 0, text.length, cost, responseTime, {
                textLength: text.length,
                voice: document.getElementById('voiceStyle')?.value || 'nova'
            });
            
            const audioBlob = await response.blob();
            return URL.createObjectURL(audioBlob);
        } else {
            throw new Error(`OpenAI TTS API error: ${response.status}`);
        }
    } catch (error) {
        console.error('❌ OpenAI TTS failed:', error);
        
        // 记录错误日志
        logApiCall(model, 0, text.length, 0, Date.now() - startTime, {
            error: error.message,
            type: 'tts_error'
        });
        
        return null;
    }
}

/**
 * 播放音频
 * @param {string} text - 要播放的文本
 */
async function playAudio(text) {
    if (currentAudio) {
        currentAudio.pause();
        currentAudio = null;
    }

    const audioIndicator = document.getElementById('audioIndicator');
    if (audioIndicator) {
        audioIndicator.style.display = 'block';
    }

    try {
        const audioUrl = await generateSpeech(text);
        if (audioUrl) {
            currentAudio = new Audio(audioUrl);
            
            currentAudio.onended = () => {
                URL.revokeObjectURL(audioUrl);
                currentAudio = null;
            };
            
            currentAudio.onerror = (error) => {
                console.error('❌ Audio playback error:', error);
                URL.revokeObjectURL(audioUrl);
                currentAudio = null;
            };
            
            await currentAudio.play();
            console.log('🔊 Audio playback started');
        } else {
            console.warn('⚠️ No audio URL generated');
        }
    } catch (error) {
        console.error('❌ Audio generation/playback failed:', error);
        showError('语音播放失败: ' + error.message);
    } finally {
        if (audioIndicator) {
            audioIndicator.style.display = 'none';
        }
    }
}

// =============== 面试控制功能 ===============

/**
 * 开始面试
 */
async function startInterview() {
    console.log('🎯 Starting interview...');
    
    // 验证API密钥
    if (!openaiKey || (isDeveloperMode && !openaiKey.startsWith('sk-'))) {
        showError('请先配置OpenAI API Key');
        return;
    }
    
    // 获取面试设置
    const style = document.getElementById('interviewerStyle')?.value || 'friendly';
    const difficulty = document.getElementById('difficulty')?.value || 'intermediate';
    
    console.log('Interview settings:', { style, difficulty });
    
    // 构建系统提示
    const systemPrompt = `${INTERVIEWER_PERSONALITIES[style]}

面试难度: ${DIFFICULTY_SETTINGS[difficulty]}

面试规则：
1. 一次只问一个问题，等候选人回答完再问下一个
2. 根据候选人的回答进行3-5轮深度追问
3. 记住之前的所有对话内容，形成连贯的面试体验
4. 每个问题都要有明确的考察目的
5. 面试总时长控制在15-20分钟
6. 适时给予反馈和鼓励
7. 最后要给出综合评价

请用中文进行面试，保持专业但友好的语气。现在开始第一个问题。`;

    // 初始化对话历史
    conversationHistory = [
        { role: 'system', content: systemPrompt }
    ];
    
    // 生成新的会话ID
    generateNewSessionId();

    // 更新UI状态
    updateInterviewUIState('running');
    
    // 显示加载状态
    showLoading(true);

    try {
        const response = await callGPT41(conversationHistory);
        
        // 添加AI回复到对话历史
        conversationHistory.push({ role: 'assistant', content: response });
        
        // 显示消息
        addMessage(response, 'interviewer');
        
        // 播放语音
        await playAudio(response);
        
        interviewStarted = true;
        
        console.log('✅ Interview started successfully');
        showSuccess('面试已开始！');
        
    } catch (error) {
        console.error('❌ Failed to start interview:', error);
        showError('启动面试失败: ' + error.message);
        endInterview();
    } finally {
        showLoading(false);
    }
}

/**
 * 发送用户消息
 */
async function sendMessage() {
    const userInput = document.getElementById('userInput');
    const message = userInput?.value.trim();

    if (!message) {
        showError('请输入您的回答');
        return;
    }
    
    // 验证消息内容
    const validation = validateMessage(message);
    if (!validation.valid) {
        showError(validation.error);
        return;
    }

    console.log('📤 Sending user message...', { messageLength: message.length });

    // 清空输入框并显示用户消息
    userInput.value = '';
    addMessage(validation.message, 'user');
    
    // 更新UI状态
    updateSendButtonState('sending');
    showLoading(true);

    // 添加到对话历史
    conversationHistory.push({ role: 'user', content: validation.message });

    try {
        const response = await callGPT41(conversationHistory);
        
        // 添加AI回复到对话历史
        conversationHistory.push({ role: 'assistant', content: response });
        
        // 显示AI回复
        addMessage(response, 'interviewer');
        
        // 播放语音
        await playAudio(response);
        
        console.log('✅ Message sent and response received');
        
    } catch (error) {
        console.error('❌ Failed to send message:', error);
        showError('发送消息失败: ' + error.message);
        
        // 显示错误消息给用户
        addMessage('抱歉，我遇到了一些技术问题。请稍后再试。', 'interviewer');
    } finally {
        showLoading(false);
        updateSendButtonState('ready');
    }
}

/**
 * 生成面试报告
 */
async function generateReport() {
    if (conversationHistory.length < 4) {
        showError('面试内容太少，无法生成有效报告。请至少进行3轮对话。');
        return;
    }

    console.log('📊 Generating interview report...');
    showLoading(true);

    const reportPrompt = `基于以上完整的面试对话，请生成一份专业的面试评估报告。报告应包括：

1. 候选人整体表现概述
2. 核心能力评估（技能、沟通、逻辑思维、应变能力等）
3. 具体优势和亮点
4. 需要改进的方面
5. 面试表现打分（1-10分，各维度详细说明）
6. 录用建议（推荐/有条件推荐/不推荐）
7. 针对性的职业发展建议

请用专业、客观、建设性的语言撰写，报告要具体、有针对性。`;

    try {
        const reportHistory = [...conversationHistory, { role: 'user', content: reportPrompt }];
        const report = await callGPT41(reportHistory);
        
        addMessage(`📊 **面试评估报告**\n\n${report}`, 'interviewer');
        await playAudio('您的专业面试评估报告已经生成完成，请查看详细分析和建议。');
        
        console.log('✅ Interview report generated successfully');
        showSuccess('面试报告生成成功！');
        
    } catch (error) {
        console.error('❌ Failed to generate report:', error);
        showError('生成报告失败: ' + error.message);
    } finally {
        showLoading(false);
    }
}

/**
 * 结束面试
 */
function endInterview() {
    console.log('🏁 Ending interview...');
    
    interviewStarted = false;
    updateInterviewUIState('ended');
    
    addMessage('面试结束，感谢您的参与！如需查看详细评估，请点击"生成报告"按钮。', 'interviewer');
    playAudio('面试结束，感谢您的参与！');
    
    console.log('✅ Interview ended');
    showSuccess('面试已结束');
}

/**
 * 清空聊天记录
 */
function clearChat() {
    console.log('🗑️ Clearing chat...');
    
    const chatArea = document.getElementById('chatArea');
    if (chatArea) {
        chatArea.innerHTML = `
            <div class="message interviewer">
                <strong>🎭 AI面试官 Sarah：</strong>
                欢迎来到PersonaHire Ultimate！我已准备好开始新的面试。请配置好设置后点击"开始面试"。
                <div class="voice-controls">
                    <button class="voice-btn" onclick="playWelcomeMessage()">🔊 听语音欢迎</button>
                </div>
            </div>
        `;
    }
    
    // 重置对话历史
    conversationHistory = [];
    
    // 重置统计数据和生成新会话ID
    apiCallCount = 0;
    totalTokensUsed = 0;
    responseTimes = [];
    generateNewSessionId();
    
    // 更新统计显示
    if (isDeveloperMode && document.getElementById('apiCallCount')) {
        updateUsageStats(0, 0, 0);
    }
    
    // 重置UI状态
    updateInterviewUIState('ready');
    
    console.log('✅ Chat cleared');
    showSuccess('对话已清空');
}

// =============== 对话导出功能 ===============

/**
 * 导出对话记录
 */
function exportConversation() {
    if (conversationHistory.length === 0) {
        showError('没有对话内容可以导出');
        return;
    }

    console.log('💾 Exporting conversation...');

    const exportData = {
        exportInfo: {
            timestamp: new Date().toISOString(),
            mode: isDeveloperMode ? 'developer' : 'user',
            sessionId: currentSessionId,
            totalMessages: conversationHistory.length
        },
        interviewSettings: {
            interviewer: document.getElementById('interviewerStyle')?.value || 'unknown',
            difficulty: document.getElementById('difficulty')?.value || 'unknown',
            voice: document.getElementById('voiceStyle')?.value || 'unknown'
        },
        statistics: {
            apiCalls: apiCallCount,
            tokensUsed: totalTokensUsed,
            estimatedCost: calculateTotalCost(),
            avgResponseTime: responseTimes.length > 0 ? 
                Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length) : 0,
            sessionDuration: Math.round((Date.now() - sessionStartTime) / 1000)
        },
        conversation: conversationHistory.filter(msg => msg.role !== 'system'), // 排除系统提示
        tokenLogs: isDeveloperMode ? getLogsForTimeRange('today') : undefined
    };

    const filename = `interview-${currentSessionId}-${Date.now()}.json`;
    downloadAsJSON(exportData, filename);
    
    console.log('✅ Conversation exported');
    showSuccess('对话已导出到本地文件');
}

// =============== UI状态管理 ===============

/**
 * 添加消息到聊天区域
 * @param {string} content - 消息内容
 * @param {string} sender - 发送者类型 (interviewer/user)
 */
function addMessage(content, sender) {
    const chatArea = document.getElementById('chatArea');
    if (!chatArea) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;
    
    const senderName = sender === 'interviewer' ? '🎭 AI面试官 Sarah' : '👤 您';
    const safeContent = content.replace(/\n/g, '<br>');
    messageDiv.innerHTML = `<strong>${senderName}：</strong>${safeContent}`;
    
    // 为面试官消息添加语音控制
    if (sender === 'interviewer') {
        const voiceControls = document.createElement('div');
        voiceControls.className = 'voice-controls';
        voiceControls.innerHTML = `<button class="voice-btn" onclick="playAudio('${content.replace(/'/g, "\\'")}')">🔊 重播语音</button>`;
        messageDiv.appendChild(voiceControls);
    }
    
    chatArea.appendChild(messageDiv);
    chatArea.scrollTop = chatArea.scrollHeight;
}

/**
 * 更新面试UI状态
 * @param {string} state - 状态 (ready/running/ended)
 */
function updateInterviewUIState(state) {
    const startBtn = document.getElementById('startBtn');
    const endBtn = document.getElementById('endBtn');
    const reportBtn = document.getElementById('reportBtn');
    const userInput = document.getElementById('userInput');
    const sendBtn = document.getElementById('sendBtn');
    
    switch (state) {
        case 'ready':
            if (startBtn) startBtn.disabled = false;
            if (endBtn) endBtn.disabled = true;
            if (reportBtn) reportBtn.disabled = true;
            if (userInput) userInput.disabled = true;
            if (sendBtn) sendBtn.disabled = true;
            break;
            
        case 'running':
            if (startBtn) startBtn.disabled = true;
            if (endBtn) endBtn.disabled = false;
            if (reportBtn) reportBtn.disabled = false;
            if (userInput) userInput.disabled = false;
            if (sendBtn) sendBtn.disabled = false;
            break;
            
        case 'ended':
            if (startBtn) startBtn.disabled = false;
            if (endBtn) endBtn.disabled = true;
            if (userInput) userInput.disabled = true;
            if (sendBtn) sendBtn.disabled = true;
            break;
    }
}

/**
 * 更新发送按钮状态
 * @param {string} state - 状态 (ready/sending)
 */
function updateSendButtonState(state) {
    const sendBtn = document.getElementById('sendBtn');
    if (!sendBtn) return;
    
    switch (state) {
        case 'ready':
            sendBtn.disabled = false;
            sendBtn.textContent = '📤 发送回答';
            break;
        case 'sending':
            sendBtn.disabled = true;
            sendBtn.textContent = '⏳ 发送中...';
            break;
    }
}

/**
 * 显示/隐藏加载状态
 * @param {boolean} show - 是否显示
 */
function showLoading(show) {
    const loading = document.getElementById('loading');
    if (loading) {
        loading.style.display = show ? 'block' : 'none';
    }
}

// =============== 欢迎消息播放 ===============

/**
 * 播放欢迎消息
 */
async function playWelcomeMessage() {
    const welcomeText = "欢迎来到PersonaHire Ultimate！我是您的专属AI面试官Sarah，搭载了最强大的GPT-4.1推理引擎。让我们开始一场精彩的面试吧！";
    await playAudio(welcomeText);
}

// =============== 事件监听器设置 ===============

/**
 * 设置事件监听器
 */
function setupEventListeners() {
    // 回车发送消息
    const userInput = document.getElementById('userInput');
    if (userInput) {
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    console.log('✅ Event listeners setup complete');
}

// =============== 模块导出 ===============

// 确保全局可访问的函数
window.callGPT41 = callGPT41;
window.generateSpeech = generateSpeech;
window.playAudio = playAudio;
window.startInterview = startInterview;
window.sendMessage = sendMessage;
window.generateReport = generateReport;
window.endInterview = endInterview;
window.clearChat = clearChat;
window.exportConversation = exportConversation;
window.addMessage = addMessage;
window.playWelcomeMessage = playWelcomeMessage;
window.setupEventListeners = setupEventListeners;

console.log('🚀 Main module loaded successfully');
